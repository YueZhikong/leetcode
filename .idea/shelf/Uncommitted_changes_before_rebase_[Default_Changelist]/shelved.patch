Index: src/leetcode1_99/Leetcode83.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/leetcode1_99/Leetcode83.java	(date 1597937067937)
+++ src/leetcode1_99/Leetcode83.java	(date 1597937067937)
@@ -0,0 +1,42 @@
+package leetcode1_99;
+
+import forOffer.ListNode;
+
+import java.util.HashMap;
+
+public class Leetcode83 {
+    //不排序
+    public ListNode deleteDuplicates(ListNode head) {
+        if (head==null){
+            return null;
+        }
+        ListNode p = head;
+        ListNode q = head.next;
+        HashMap<Integer,Object> hashMap = new HashMap<>();
+        hashMap.put(p.val,p);
+        while (q!=null){
+            if (hashMap.get(q.val)==null){
+                hashMap.put(q.val,q);
+                p = p.next;
+                q = q.next;
+            }
+            else {
+                p.next = q.next;
+                q = p.next;
+            }
+        }
+        return head;
+    }
+    //排序
+    public ListNode deleteDuplicates02(ListNode head) {
+        ListNode current = head;
+        while (current != null && current.next != null) {
+            if (current.next.val == current.val) {
+                current.next = current.next.next;
+            } else {
+                current = current.next;
+            }
+        }
+        return head;
+    }
+}
Index: src/leetcode1_99/Leetcode88.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/leetcode1_99/Leetcode88.java	(date 1597938541204)
+++ src/leetcode1_99/Leetcode88.java	(date 1597938541204)
@@ -0,0 +1,27 @@
+package leetcode1_99;
+
+public class Leetcode88 {
+    public void merge(int[] nums1, int m, int[] nums2, int n) {
+        int length = m;
+        int i = 0;
+        int j = 0;
+        while (i <m+n && j<n){
+            if (nums1[i]==0 &&i ==length){
+                length++;
+                nums1[i]=nums2[j];
+                i++;
+                j++;
+            }
+           else if (nums1[i]>nums2[j]){
+                for (int k=length;k>i;k--){
+                    nums1[k]=nums1[k-1];
+                }
+                length++;
+                nums1[i]=nums2[j];
+                j++;
+            }else {
+                i++;
+            }
+        }
+    }
+}
Index: src/leetcode1_99/Leetcode70.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/leetcode1_99/Leetcode70.java	(date 1597935434738)
+++ src/leetcode1_99/Leetcode70.java	(date 1597935434738)
@@ -0,0 +1,18 @@
+package leetcode1_99;
+
+public class Leetcode70 {
+    public int climbStairs(int n) {
+        if(n<=2){
+            return n;
+        }
+        int i = 1;
+        int j = 2;
+        int temp = 0;
+        for (int k = 3; k <= n;k++){
+            temp = j;
+            j = j + i;
+            i = temp;
+        }
+        return j;
+    }
+}
